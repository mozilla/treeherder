# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-20 15:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion

# Original SQL:
#
# BEGIN;
# --
# -- Create model TextLogErrorMatch
# --
# CREATE TABLE `text_log_error_match` (`id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY, `score` numeric(3, 2) NULL, `classified_failure_id` bigint NOT NULL, `matcher_id` integer NOT NULL, `text_log_error_id` bigint NOT NULL);
# --
# -- Create model TextLogErrorMetadata
# --
# CREATE TABLE `text_log_error_metadata` (`best_is_verified` bool NOT NULL, `best_classification_id` bigint NULL, `failure_line_id` bigint NULL UNIQUE, `text_log_error_id` bigint NOT NULL PRIMARY KEY);
# --
# -- Add field text_log_errors to classifiedfailure
# --
# --
# -- Alter unique_together for textlogerrormatch (1 constraint(s))
# --
# ALTER TABLE `text_log_error_match` ADD CONSTRAINT `text_log_error_match_text_log_error_id_192a8c4c_uniq` UNIQUE (`text_log_error_id`, `classified_failure_id`, `matcher_id`);
# ALTER TABLE `text_log_error_match` ADD CONSTRAINT `text_log_classified_failure_id_1b38b499_fk_classified_failure_id` FOREIGN KEY (`classified_failure_id`) REFERENCES `classified_failure` (`id`);
# ALTER TABLE `text_log_error_match` ADD CONSTRAINT `text_log_error_match_matcher_id_9b9dbb12_fk_matcher_id` FOREIGN KEY (`matcher_id`) REFERENCES `matcher` (`id`);
# ALTER TABLE `text_log_error_match` ADD CONSTRAINT `text_log_error_m_text_log_error_id_09109841_fk_text_log_error_id` FOREIGN KEY (`text_log_error_id`) REFERENCES `text_log_error` (`id`);
# ALTER TABLE `text_log_error_metadata` ADD CONSTRAINT `text_lo_best_classification_id_54f54ccb_fk_classified_failure_id` FOREIGN KEY (`best_classification_id`) REFERENCES `classified_failure` (`id`);
# ALTER TABLE `text_log_error_metadata` ADD CONSTRAINT `text_log_error_metad_failure_line_id_2b5bd526_fk_failure_line_id` FOREIGN KEY (`failure_line_id`) REFERENCES `failure_line` (`id`);
# ALTER TABLE `text_log_error_metadata` ADD CONSTRAINT `text_log_error_m_text_log_error_id_c2600712_fk_text_log_error_id` FOREIGN KEY (`text_log_error_id`) REFERENCES `text_log_error` (`id`);
# COMMIT;


class Migration(migrations.Migration):

    dependencies = [
        ('model', '0002_add_taskcluster_job_metadata'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
-- Disable foreign key checks
SET FOREIGN_KEY_CHECKS=0;

CREATE TABLE `text_log_error_match`
    (`id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY,
     `score` numeric(3, 2) NULL,
     `classified_failure_id` bigint NOT NULL,
     `matcher_id` integer NOT NULL,
     `text_log_error_id` bigint NOT NULL,
     INDEX `text_log_error_match_9f0d755f` (`classified_failure_id`),
     INDEX `text_log_error_match_ad8a0085` (`text_log_error_id`),
     CONSTRAINT `text_log_error_match_text_log_error_id_192a8c4c_uniq`
         UNIQUE (`text_log_error_id`, `classified_failure_id`, `matcher_id`),
     CONSTRAINT `text_log_classified_failure_id_1b38b499_fk_classified_failure_id`
         FOREIGN KEY (`classified_failure_id`) REFERENCES `classified_failure` (`id`),
     CONSTRAINT `text_log_error_match_matcher_id_9b9dbb12_fk_matcher_id`
         FOREIGN KEY (`matcher_id`) REFERENCES `matcher` (`id`),
     CONSTRAINT `text_log_error_m_text_log_error_id_09109841_fk_text_log_error_id`
         FOREIGN KEY (`text_log_error_id`) REFERENCES `text_log_error` (`id`));

CREATE TABLE `text_log_error_metadata`
    (`text_log_error_id` bigint NOT NULL PRIMARY KEY,
     `best_is_verified` bool NOT NULL,
     `best_classification_id` bigint NULL,
     `failure_line_id` bigint NULL UNIQUE,
    CONSTRAINT `text_lo_best_classification_id_54f54ccb_fk_classified_failure_id`
        FOREIGN KEY (`best_classification_id`) REFERENCES `classified_failure` (`id`),
    CONSTRAINT `text_log_error_metad_failure_line_id_2b5bd526_fk_failure_line_id`
        FOREIGN KEY (`failure_line_id`) REFERENCES `failure_line` (`id`),
    CONSTRAINT `text_log_error_m_text_log_error_id_c2600712_fk_text_log_error_id`
        FOREIGN KEY (`text_log_error_id`) REFERENCES `text_log_error` (`id`),
     CONSTRAINT `text_log_error_metadata_text_log_error_id_c2600712_uniq`
         UNIQUE (`text_log_error_id`));
""",
            reverse_sql="""
DROP TABLE `text_log_error_match` CASCADE;
DROP TABLE `text_log_error_metadata` CASCADE;
""",
            state_operations=[
                migrations.CreateModel(
                    name='TextLogErrorMatch',
                    fields=[
                        ('id', models.BigAutoField(primary_key=True, serialize=False)),
                        ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                        ('classified_failure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='error_matches', to='model.ClassifiedFailure')),
                        ('matcher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='model.Matcher')),
                        ('text_log_error', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='model.TextLogError')),
                    ],
                    options={
                        'db_table': 'text_log_error_match',
                        'verbose_name_plural': 'text log error matches',
                    },
                ),
                migrations.CreateModel(
                    name='TextLogErrorMetadata',
                    fields=[
                        ('best_is_verified', models.BooleanField(default=False)),
                        ('best_classification', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='best_for_errors', to='model.ClassifiedFailure')),
                        ('failure_line', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='text_log_error_metadata', to='model.FailureLine')),
                        ('text_log_error', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='_metadata', to='model.TextLogError')),
                    ],
                    options={
                        'db_table': 'text_log_error_metadata',
                    },
                ),
                migrations.AddField(
                    model_name='classifiedfailure',
                    name='text_log_errors',
                    field=models.ManyToManyField(related_name='classified_failures', through='model.TextLogErrorMatch', to='model.TextLogError'),
                ),
                migrations.AlterUniqueTogether(
                    name='textlogerrormatch',
                    unique_together=set([('text_log_error', 'classified_failure', 'matcher')]),
                )
            ])]

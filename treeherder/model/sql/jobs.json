{
    "deletes":{
        "delete_bug_job_map":{
            "sql":"DELETE FROM bug_job_map WHERE job_id = ? and bug_id = ?",
            "host_type": "master_host"
        },
        "delete_note":{
            "sql":"DELETE FROM job_note WHERE id = ?",
            "host_type": "master_host"
        },
        "cycle_job_artifact":{

            "sql":"DELETE FROM job_artifact WHERE job_id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_job_log_url":{

            "sql":"DELETE FROM job_log_url WHERE job_id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_job_note":{

            "sql":"DELETE FROM job_note WHERE job_id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_bug_job_map":{

            "sql":"DELETE FROM bug_job_map WHERE job_id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_job":{

            "sql":"DELETE FROM job WHERE id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_revision":{

            "sql":"DELETE FROM revision WHERE id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_revision_map":{

            "sql":"DELETE FROM revision_map WHERE result_set_id IN (REP0)",
            "host_type": "master_host"
        },
        "cycle_result_set":{

            "sql":"DELETE FROM result_set WHERE id IN (REP0)",
            "host_type": "master_host"
        }
    },
    "inserts":{
        "create_job_data":{
            "sql":"INSERT INTO `job` (
                `job_guid`,
                `signature`,
                `job_coalesced_to_guid`,
                `result_set_id`,
                `build_platform_id`,
                `machine_platform_id`,
                `machine_id`,
                `device_id`,
                `option_collection_hash`,
                `job_type_id`,
                `product_id`,
                `who`,
                `reason`,
                `result`,
                `state`,
                `submit_timestamp`,
                `start_timestamp`,
                `end_timestamp`,
                `running_eta`,
                `tier`)
                SELECT ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?
                FROM DUAL WHERE NOT EXISTS (
                    SELECT `job_guid`
                    FROM `job`
                    WHERE `job_guid` = ?
                    OR `job_guid` = ?
                )",

            "host_type":"master_host"
        },
        "set_job_eta":{
            "sql":"INSERT INTO `job_eta` (
                    `signature`,
                    `state`,
                    `avg_sec`,
                    `median_sec`,
                    `min_sec`,
                    `max_sec`,
                    `std`,
                    `sample_count`,
                    `submit_timestamp`)
                   VALUES (?,?,?,?,?,?,?,?,?)",

            "host_type":"master_host"
        },
        "set_result_set":{

            "sql":"INSERT INTO `result_set` (`author`, `revision_hash`,`push_timestamp`, `active_status`)
                SELECT ?,?,?,?
                FROM DUAL
                WHERE NOT EXISTS (
                    SELECT `revision_hash`, `push_timestamp`
                    FROM `result_set`
                    WHERE `revision_hash` = ?
                )",

            "host_type":"master_host"
        },
        "set_revision":{

            "sql":"INSERT INTO `revision` (
                    `revision`,
                    `author`,
                    `comments`,
                    `commit_timestamp`,
                    `repository_id`
                    )
                SELECT ?,?,?,?,?
                FROM DUAL
                WHERE NOT EXISTS (
                    SELECT `revision`
                    FROM `revision`
                    WHERE `revision` = ? AND `repository_id` = ?
                )",

            "host_type":"master_host"
        },
        "set_revision_map":{

            "sql":"INSERT INTO `revision_map` (
                `revision_id`,
                `result_set_id`
                )
                SELECT ?,?
                FROM DUAL
                WHERE NOT EXISTS (
                    SELECT `revision_id`, `result_set_id`
                    FROM `revision_map`
                    WHERE `revision_id` = ? AND `result_set_id` = ?
                )",

            "host_type":"master_host"
        },
        "set_job_log_url":{

            "sql":"INSERT INTO `job_log_url` (
                `job_id`,
                `name`,
                `url`,
                `parse_status`
                )
            VALUES (?,?,?,?)",

            "host_type":"master_host"
        },
        "set_job_artifact":{

            "sql":"INSERT INTO `job_artifact` (
                `job_id`,
                `name`,
                `type`,
                `blob`
                )
                SELECT ?,?,?,?
                FROM DUAL
                WHERE NOT EXISTS (
                    SELECT `job_id`
                    FROM `job_artifact`
                    WHERE `job_id` = ? and `name` = ?
                )",

            "host_type":"master_host"
        },
        "insert_note":{

            "sql":"INSERT INTO `job_note` (
                `job_id`,
                `failure_classification_id`,
                `who`,
                `note`,
                `note_timestamp`)
            VALUES (?,?,?,?,?)",

            "host_type":"master_host"
        },
        "insert_bug_job_map":{
            "sql":"INSERT INTO `bug_job_map` (
                `job_id`,
                `bug_id`,
                `type`,
                `submit_timestamp`,
                `who`,
                `active_status`)
            VALUES (?,?,?,?,?,'active')",
            "host_type":"master_host"
        }


    },

    "updates": {
        "set_state":{

            "sql":"UPDATE `job`
                SET    `state` = ?
                WHERE  `id` = ?
                AND `state` <> 'completed'",

                "host_type":"master_host"
        },
        "cancel_all":{

            "sql":"UPDATE `job`
                   SET    `state` = 'completed', `result` = 'usercancel'
                   WHERE  `result_set_id` = ?
                   AND `state` <> 'completed'",

                "host_type":"master_host"
        },
        "cancel_job":{

            "sql":"UPDATE `job`
                   SET    `state` = 'completed', `result` = 'usercancel'
                   WHERE  `job_guid` = ?
                   AND `state` <> 'completed'",

                "host_type":"master_host"
        },
        "update_job_data":{
            "sql":"
                UPDATE `job`
                SET
                `job_guid` = ?,
                `job_coalesced_to_guid` = ?,
                `result_set_id` = ?,
                `machine_id` = ?,
                `option_collection_hash` = ?,
                `job_type_id` = ?,
                `product_id` = ?,
                `who` = ?,
                `reason` = ?,
                `result` = ?,
                `state` = ?,
                `start_timestamp` = ?,
                `end_timestamp` = ?
                WHERE
                    `state` != 'completed'
                AND ? <> 'pending'
                AND `id` = ?",

            "host_type":"master_host"
        },
        "update_coalesced_guids":{
            "sql":"UPDATE `job`
                   SET `job_coalesced_to_guid` = ?
                   WHERE `job_guid` = ?",

            "host_type":"master_host"
        },
        "update_last_job_classification":{
            "sql":"UPDATE job j
                    SET failure_classification_id = (
                        SELECT
                            IFNULL(
                                ( SELECT
                                    failure_classification_id
                                FROM
                                    job_note jn
                                WHERE
                                    jn.job_id = j.id
                                ORDER BY
                                    note_timestamp DESC
                                LIMIT 0,1 ), 1
                            )
                        )
                    WHERE j.id = ?",

            "host_type":"master_host"
        },
        "update_job_log_url":{

            "sql":"UPDATE `job_log_url`
                SET    `parse_status` = ?
                WHERE  `id` = ?
                AND `active_status` = 'active'",
            "host_type":"master_host"
        }
    },
    "selects":{
        "get_all_properties_of_signatures":{

            "sql": "SELECT `property`, `value`, `signature` FROM `series_signature`
                    WHERE `signature` IN (REP0)",

             "host_type":"read_host"

        },
        "get_perf_series_properties":{

            "sql":"SELECT s.`signature`, s.`property`, s.`value`
                   FROM series_signature AS s
                   LEFT JOIN `performance_series` AS p
                    ON s.`signature` = p.`series_signature`
                   WHERE p.`last_updated` >= ? AND p.`interval_seconds` = ?",

            "host_type":"read_host"
        },
        "get_performance_series_from_signatures":{

            "sql": "SELECT `series_signature`, `blob` FROM `performance_series`
                    WHERE `series_signature` IN (REP0) AND `interval_seconds` = ?",

             "host_type":"read_host"

        },
        "get_max_job_submit_timestamp":{

            "sql": "SELECT MAX(`submit_timestamp`) AS 'submit_timestamp' FROM `job`",

            "host_type":"master_host"

        },
        "get_eta_groups":{

            "sql":"SELECT signature,
                          CAST(
                            ROUND( AVG(end_timestamp - start_timestamp) )
                            AS UNSIGNED) AS 'running_avg_sec',

                          MIN(end_timestamp - start_timestamp) AS 'running_min_sec',
                          MAX(end_timestamp - start_timestamp) AS 'running_max_sec',

                          CAST(
                            ROUND( STD(end_timestamp - start_timestamp) )
                            AS SIGNED) AS 'running_std',

                          GROUP_CONCAT(end_timestamp - start_timestamp SEPARATOR ',')
                            AS 'running_samples'
                   FROM job
                   WHERE submit_timestamp >= ? AND
                         start_timestamp >= submit_timestamp AND
                         end_timestamp >= start_timestamp AND
                         start_timestamp > 0 AND end_timestamp > 0
                   GROUP BY signature",

            "host_type":"read_host"

        },
        "get_signature_list_from_job_ids":{

            "sql":"SELECT j.id,
                          j.result_set_id,
                          j.job_guid,
                          j.signature,
                          r.push_timestamp
                   FROM job AS j
                   JOIN result_set AS r
                    ON j.result_set_id = r.id
                   WHERE j.id IN (REP0)",
            "host_type":"master_host"

        },
        "get_last_eta_by_signatures":{
            "sql":"SELECT signature,
                          state,
                          avg_sec,
                          median_sec,
                          min_sec,
                          max_sec,
                          std,
                          sample_count,
                          MAX(submit_timestamp)
                    FROM job_eta
                    WHERE signature IN (REP0)
                    GROUP BY signature, state
                    ORDER BY submit_timestamp DESC",
            "host_type":"read_host"
        },
        "get_revision_ids_to_cycle":{
            "sql":"SELECT revision_id FROM revision_map WHERE result_set_id IN (REP0)",
            "host_type":"master_host"
        },

        "get_jobs_to_cycle":{
            "sql":"SELECT id, job_guid FROM job WHERE result_set_id IN (REP0)",
            "host_type":"master_host"
        },

        "get_result_sets_to_cycle":{
            "sql":"SELECT id FROM result_set WHERE push_timestamp < ?",
            "host_type":"master_host"
        },

        "get_incomplete_job_guids": {
            "sql": "SELECT j.job_guid, j.result_set_id, rs.push_timestamp as result_set_push_timestamp
                    FROM job as j
                    LEFT JOIN result_set as rs
                      ON j.result_set_id = rs.id
                    WHERE j.state <> 'completed'
                    AND j.result_set_id = ?",
            "host_type":"read_host"
        },

        "get_job":{
            "sql":"SELECT
                    j.id,
                    j.`job_guid`,
                    j.`signature`,
                    j.`job_coalesced_to_guid`,
                    j.`build_platform_id`,
                    j.`option_collection_hash`,
                    mp.`platform` as platform,
                    mp.`os_name` as machine_platform_os,
                    mp.`architecture` as machine_platform_architecture,
                    bp.`platform` as build_platform,
                    bp.`os_name` as build_os,
                    bp.`architecture` as build_architecture,
                    m.`name` as machine_name,
                    m.`id` as machine_id,
                    jt.`name` as job_type_name,
                    jt.`symbol` as job_type_symbol,
                    jt.`description` as job_type_description,
					jt.id as job_type_id,
					jg.`name` as job_group_name,
                    jg.`symbol` as job_group_symbol,
                    jg.`description` as job_group_description,
                    j.`who`,
                    j.failure_classification_id,
                    j.`result_set_id`,
                    j.`result`,
                    j.`state`,
                    j.`reason`,
                    j.`start_timestamp`,
                    j.`end_timestamp`,
                    j.`submit_timestamp`,
                    j.`running_eta`,
                    j.`last_modified`,
                    j.`tier`,
                    rds.`name` as ref_data_name,
                    rds.`build_system_type` as build_system_type
                  FROM `job` as j
                  LEFT JOIN `REP0`.`machine` as m
                    ON j.`machine_id` = m.id
                  LEFT JOIN `REP0`.`machine_platform` as mp
                    ON j.`machine_platform_id` = mp.id
                  LEFT JOIN `REP0`.`build_platform` as bp
                    ON j.`build_platform_id` = bp.id
                  LEFT JOIN `REP0`.`job_type` as jt
                    ON j.`job_type_id` = jt.id
				  LEFT JOIN `REP0`.`job_group` as jg
                    ON jt.`job_group_id` = jg.id
                  LEFT JOIN `REP0`.reference_data_signatures rds
                    ON j.signature = rds.signature
                  WHERE j.id = ?
                  GROUP BY j.id",

            "host_type":"read_host"
        },
        "get_job_list":{
            "sql":"SELECT
                    j.id,
                    j.`job_guid`,
                    j.`signature`,
                    j.`job_coalesced_to_guid`,
                    j.`build_platform_id`,
                    j.`option_collection_hash`,
                    j.failure_classification_id,
                    m.`name` as machine_name,
                    d.`name` as device_name,
                    mp.`platform` as platform,
                    mp.`os_name` as machine_platform_os,
                    mp.`architecture` as machine_platform_architecture,
                    bp.`platform` as build_platform,
                    bp.`os_name` as build_os,
                    bp.`architecture` as build_architecture,
                    j.`job_type_id` as job_type_id,
                    jt.`name` as job_type_name,
                    jt.`symbol` as job_type_symbol,
                    jt.`description` as job_type_description,
					jg.`name` as job_group_name,
                    jt.`job_group_id` as job_group_id,
                    jg.`symbol` as job_group_symbol,
                    jg.`description` as job_group_description,
                    j.`who`,
                    j.`result_set_id`,
                    j.`result`,
                    j.`state`,
                    j.`reason`,
                    j.`start_timestamp`,
                    j.`end_timestamp`,
                    j.`submit_timestamp`,
                    j.`running_eta`,
                    j.`last_modified`,
                    j.`tier`,
                    rds.`name` as ref_data_name,
                    rds.`build_system_type` as build_system_type
                  FROM `job` as j
                  LEFT JOIN `REP0`.`machine` as m
                    ON j.`machine_id` = m.id
                  LEFT JOIN `REP0`.`machine_platform` as mp
                    ON j.`machine_platform_id` = mp.id
                  LEFT JOIN `REP0`.`build_platform` as bp
                    ON j.`build_platform_id` = bp.id
                  LEFT JOIN `REP0`.`job_type` as jt
                    ON j.`job_type_id` = jt.id
				  LEFT JOIN `REP0`.`job_group` as jg
                    ON jt.`job_group_id` = jg.id
                  LEFT JOIN result_set rs
                    ON rs.id = j.result_set_id
                  LEFT JOIN `REP0`.`device` as d
                    ON j.device_id = d.id
                  LEFT JOIN `REP0`.reference_data_signatures rds
                    ON j.signature = rds.signature
                  WHERE 1
                  REP1
                  GROUP BY j.id
                  ORDER BY
                    rs.push_timestamp DESC
                  ",

            "host_type":"read_host"
        },
        "get_log_references":{
            "sql":"SELECT `name`, `url`
                   FROM `job_log_url`
                   WHERE job_id = ?",

            "host_type":"read_host"
        },
        "get_job_log_url_detail":{
            "sql": "SELECT `id`, `job_id`, `name`, `url`, `parse_status`
                    FROM job_log_url
                    WHERE id = ? and active_status = 'active'",
            "host_type":"read_host"
        },
        "get_job_log_url_list":{
            "sql": "SELECT `id`, `job_id`, `name`, `url`, `parse_status`
                    FROM job_log_url
                    WHERE job_id in (REP0)
                    and active_status='active'",
            "host_type": "master_host"
        },
        "get_job_artifact":{
            "sql":"SELECT
                      id,
                      job_id,
                      name,
                      `type`,
                      `blob`
                   FROM job_artifact
                   WHERE active_status = 'active'
                   REP0
                   ORDER BY id DESC, name
                   ",
            "host_type": "read_host"
        },
        "get_job_artifact_references":{
            "sql":"SELECT `id`, `name`, `type` from `job_artifact`
                   WHERE `job_id` = ?",
            "host_type": "read_host"
        },
        "get_max_job_id":{
            "sql":"SELECT max(`id`) as max_id from `job`",
            "host_type": "read_host"
        },
        "get_job_note":{
            "sql":"SELECT * from `job_note`
                   WHERE `id` = ?",
            "host_type": "read_host"
        },
        "get_job_note_list":{
            "sql":"SELECT * from `job_note`
                   WHERE `job_id` = ?
                   ORDER BY `note_timestamp` DESC, id DESC
                   ",
            "host_type": "read_host"
        },
        "get_job_ids_by_guids":{
            "sql":"SELECT `id`, `job_guid`, `result_set_id`, `state`, `result`
                   FROM `job`
                   WHERE `active_status` = 'active' AND `job_guid` IN (REP0)",
            "host_type": "master_host"
        },
        "get_job_guids_in_states":{
            "sql":"SELECT `job_guid`
                   FROM `job`
                   WHERE
                   REP0
                   ",
            "host_type": "master_host"
        },
        "get_jobs_by_coalesced_guids":{

            "sql":"SELECT `id`, `job_guid`, `job_coalesced_to_guid`
                   FROM `job`
                   WHERE `job_coalesced_to_guid` IN (REP0)",

            "host_type": "read_host"

        },
        "get_result_set_ids":{
            "sql":"SELECT `id`, `revision_hash`, `push_timestamp`
                   FROM `result_set`
                   WHERE `active_status` in ('active', 'onhold') AND `revision_hash` IN (REP0)",
            "host_type": "master_host"
        },
        "get_all_result_set_revision_hashes":{
            "sql":"SELECT `revision_hash`
                   FROM `result_set`
                   WHERE `active_status` = 'active'",
            "host_type": "read_host"
        },
        "get_revisions":{
            "sql":"SELECT `id`, `revision` FROM `revision`
                   WHERE `active_status` = 'active' AND `revision` IN (REP0)",

            "host_type": "master_host"
        },
        "get_result_set_list_by_ids":{
            "sql":"SELECT rs.id,
                          rs.author,
                          rs.revision_hash,
                          rs.push_timestamp
                   FROM result_set AS rs
                   WHERE rs.active_status = 'active' REP0
                   ORDER BY rs.push_timestamp DESC
                   ",
            "host_type": "read_host"
        },
        "get_result_set_list":{
            "sql":"SELECT DISTINCT
                      rs.id,
                      rs.author,
                      rs.revision_hash,
                      rs.push_timestamp
                   FROM result_set AS rs
                   INNER JOIN revision_map
                      ON rs.id = revision_map.result_set_id
                   INNER JOIN revision
                      ON revision_map.revision_id = revision.id
                   WHERE rs.active_status = 'active'
                   REP0
                   ORDER BY rs.push_timestamp DESC
                   ",
            "host_type": "read_host"
        },
        "get_revision_resultset_lookup":{
            "sql":"SELECT
                      rs.id,
                      rs.revision_hash,
                      rs.push_timestamp,
                      rs.active_status,
                      revision.id as revision_id,
                      revision.revision
                   FROM result_set AS rs
                   INNER JOIN revision_map
                      ON rs.id = revision_map.result_set_id
                   INNER JOIN revision
                      ON revision_map.revision_id = revision.id
                   WHERE 1
                   REP0
                   ORDER BY rs.push_timestamp DESC
                   LIMIT ?,?
                   ",
            "host_type": "read_host"
        },
        "get_result_set_details":{
            "sql":"SELECT
                    rm.result_set_id,
                    r.repository_id,
                    r.revision,
                    r.author,
                    r.comments,
                    r.commit_timestamp
                   FROM revision_map AS rm
                   LEFT JOIN revision AS r ON rm.revision_id = r.id
                   WHERE r.active_status = 'active' AND rm.result_set_id IN (REP0)
                   ORDER BY r.id DESC",

            "host_type": "read_host"
        },
        "get_all_log_urls":{

            "sql":"SELECT `url` FROM `job_log_url`",

            "host_type":"read_host"
        },
        "get_all_artifacts":{

            "sql":"SELECT `name`, `type`, `blob`  FROM `job_artifact`",

            "host_type":"read_host"
        },
        "get_bug_job_map_list":{
            "sql":"SELECT `job_id`, `bug_id`, `type`, `submit_timestamp`, `who`
                   FROM `bug_job_map`
                   WHERE 1
                   REP0",
            "host_type": "read_host"
        },
        "get_resultset_status":{
            "sql":"SELECT
                        id,
                        state,
                        result,
                        SUM(IF(job_coalesced_to_guid is NULL, 0, 1)) as num_coalesced,
                        count(*) as total
                   FROM job
                   WHERE result_set_id = ?
                   REP0
                   group by state, result
                   ",
            "host_type": "read_host"
        }
    }
}

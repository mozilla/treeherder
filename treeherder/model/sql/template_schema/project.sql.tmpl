--
-- Host: localhost    Database: project
-- ------------------------------------------------------
-- Server version	5.6.10

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `job`
--

DROP TABLE IF EXISTS `job`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: job
 *
 * The core job results table. Holds all build and test result data and associated
 * data mappings.
 *
 * Population Method: dynamic from incoming data
 *
 * Example Data:
 *
 *  job_guid - A unique identifier of a job or any type. For buildbot generated data
 *             the guid is a hash of associated request_ids and a timestamp.
 *
 *  job_coalesced_to_guid - If present the job was coalesced to this job_guid
 *  signature - If populated, references treeherder_reference_1.buildbot_buildernames.signature
 *  result_set_id - References result_set.id (obsolete)
 *  push_id - References pushes in the main treeherder database
 *  build_platform_id - References treeherder_reference_1.build_platform.id
 *  machine_platform_id - References treeherder_reference_1.machine_platform.id
 *  machine_id - References treeherder_reference_1.machine.id
 *  option_collection_hash - References treeherder_reference_1.option_collection.option_collection_hash
 *  job_type_id - References treeherder_reference_1.job_type.id
 *  product_id - References treeherder_reference_1.product.id
 *  failure_classification_id - References treeherder_reference_1.failure_classification.id
 *  who - Description of who submitted the job: gaia | scheduler name | username
 *  reason - Reason for the job: push | scheduled | self-serve | manual
 *  result - Job outcome description: success | failure | ...
 *  state - Current state of job: pending | running | completed | coalesced | ...
 *  submit_timestamp - Time the job was submitted.
 *  start_timestamp - Time the job was started.
 *  end_timestamp - Time the job completed.
 *  last_modified - The last time the job was modified
 *  running_eta - The estimated job duration as recorded in the job_duration table at time of submission.
 **************************/
CREATE TABLE `job` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `job_guid` varchar(50) COLLATE utf8_bin NOT NULL,
  `signature` varchar(50) DEFAULT NULL,
  `job_coalesced_to_guid` varchar(50) COLLATE utf8_bin DEFAULT NULL,
  `result_set_id` bigint(20) unsigned DEFAULT NULL,
  `push_id` int(10) unsigned NOT NULL,
  `build_platform_id` int(10) unsigned NOT NULL,
  `machine_platform_id` int(10) unsigned NOT NULL,
  `machine_id` int(10) unsigned DEFAULT NULL,
  `option_collection_hash` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `job_type_id` int(10) unsigned NOT NULL,
  `product_id` int(10) unsigned DEFAULT NULL,
  `failure_classification_id` int(10) unsigned DEFAULT 1,
  `who` varchar(50) COLLATE utf8_bin NOT NULL,
  `reason` varchar(125) COLLATE utf8_bin NOT NULL,
  `result` varchar(25) COLLATE utf8_bin DEFAULT NULL,
  `state` varchar(25) COLLATE utf8_bin NOT NULL,
  `submit_timestamp` int(10) unsigned NOT NULL,
  `start_timestamp` int(10) unsigned DEFAULT NULL,
  `end_timestamp` int(10) unsigned DEFAULT NULL,
  `last_modified` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `running_eta` int(10) unsigned DEFAULT NULL,
  `tier` int(10) unsigned DEFAULT 1,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_job_guid` (`job_guid`),
  KEY `idx_job_coalesced_to_guid` (`job_coalesced_to_guid`),
  KEY `idx_signature` (`signature`),
  KEY `idx_result_set_id` (`result_set_id`),
  KEY `idx_push_id` (`push_id`),
  KEY `idx_build_platform_id` (`build_platform_id`),
  KEY `idx_machine_platform_id` (`machine_platform_id`),
  KEY `idx_machine_id` (`machine_id`),
  KEY `idx_option_collection_hash` (`option_collection_hash`),
  KEY `idx_job_type_id` (`job_type_id`),
  KEY `idx_product_id` (`product_id`),
  KEY `idx_failure_classification_id` (`failure_classification_id`),
  KEY `idx_who` (`who`),
  KEY `idx_reason` (`reason`),
  KEY `idx_result` (`result`),
  KEY `idx_state` (`state`),
  KEY `idx_submit_timestamp` (`submit_timestamp`),
  KEY `idx_start_timestamp` (`start_timestamp`),
  KEY `idx_end_timestamp` (`end_timestamp`),
  KEY `idx_last_modified` (`last_modified`),
  KEY `idx_running` (`running_eta`),
  KEY `idx_tier` (`tier`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `job_artifact`
--

DROP TABLE IF EXISTS `job_artifact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: job_artifact
 *
 *  Holds any kind of data associated with a job. Data can be structured in the
 *  case of JSON data or raw binary in the case of an image.
 *
 * Population Method: dynamic from incoming data
 *
 * Example Data:
 *
 *  job_id - References job.id
 *  name - Name of artifact data.
 *  type - json | img | ...
 *  blob - Artifact data
 **************************/
CREATE TABLE `job_artifact` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `job_id` bigint(20) unsigned NOT NULL,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `type` varchar(50) COLLATE utf8_bin NOT NULL,
  `blob` mediumblob NOT NULL,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_job_id` (`job_id`),
  KEY `idx_name` (`name`),
  KEY `idx_type` (`type`),
  KEY `idx_active_status` (`active_status`),
  CONSTRAINT `fk_job_artifact` FOREIGN KEY (`job_id`) REFERENCES `job` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `result_set`
--

DROP TABLE IF EXISTS `result_set`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: result_set
 *
 *  A result set is defined by a set of unique repository revisions. Result sets can
 *  have any number of jobs associated with them.
 *
 * Population Method: dynamic from incoming data
 *
 * Example Data:
 *
 *  revision_hash - Hash of any number of revisions associated with the result set
 *  author - The author associated with the result_set. May or may not be the author
 *           of an associated revision.
 **************************/
CREATE TABLE `result_set` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `revision_hash` varchar(50) COLLATE utf8_bin NOT NULL,
  `short_revision` varchar(12) COLLATE utf8_bin DEFAULT NULL,
  `long_revision` varchar(40) COLLATE utf8_bin DEFAULT NULL,
  `author` varchar(150) COLLATE utf8_bin NOT NULL,
  `type` varchar(25) DEFAULT NULL,
  `push_timestamp` int(11) unsigned NOT NULL,
  `last_modified` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_revision_hash` (`revision_hash`),
  KEY `idx_short_revision` (`short_revision`),
  KEY `idx_long_revision` (`long_revision`),
  KEY `idx_author` (`author`),
  KEY `idx_type` (`type`),
  KEY `idx_push_timestamp` (`push_timestamp`),
  KEY `idx_last_modified` (`last_modified`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `revision`
--

DROP TABLE IF EXISTS `revision`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: revision
 *
 *  List of revisions and their meta data associated with result sets.
 *
 * Population Method: dynamic from incoming data
 *                   ( the meta data will have to come from external web services
 *                     when the data is received )
 *
 * Example Data:
 *
 *  revision - The revision string associated with the repository
 *  author - The author associated with the revision
 *  comments - The comments associated with the revision
 **************************/
CREATE TABLE `revision` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `revision` varchar(50) COLLATE utf8_bin NOT NULL,
  `short_revision` varchar(12) COLLATE utf8_bin DEFAULT NULL,
  `long_revision` varchar(40) COLLATE utf8_bin DEFAULT NULL,
  `author` varchar(150) COLLATE utf8_bin NOT NULL,
  `comments` text DEFAULT NULL,
  `repository_id` int(11) unsigned NOT NULL,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_revision` (`revision`, `repository_id`),
  KEY `idx_short_revision` (`short_revision`),
  KEY `idx_long_revision` (`long_revision`),
  KEY `idx_author` (`author`),
  KEY `idx_repository_id` (`repository_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `revision_map`
--

DROP TABLE IF EXISTS `revision_map`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: revision_map
 *
 *  Maps revisions to their associated result set.
 *
 * Population Method: dynamic from incoming data
 *
 * Example Data:
 *
 *  revision_id - References revision.id
 *  result_set_id - References result_set.id
 **************************/
CREATE TABLE `revision_map` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `revision_id` bigint(20) unsigned NOT NULL,
  `result_set_id` bigint(20) unsigned NOT NULL,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_revision_id` (`revision_id`),
  KEY `idx_result_set_id` (`result_set_id`),
  KEY `idx_active_status` (`active_status`),
  CONSTRAINT `fk_revision_map` FOREIGN KEY (`revision_id`) REFERENCES `revision` (`id`),
  CONSTRAINT `fk_revision_map_result_set` FOREIGN KEY (`result_set_id`) REFERENCES `result_set` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-02-27  8:54:01

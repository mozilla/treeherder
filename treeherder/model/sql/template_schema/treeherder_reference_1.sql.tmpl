--
-- Host: localhost    Database: treeherder_reference_1
-- ------------------------------------------------------
-- Server version	5.6.10

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `reference_data_signatures`
--
DROP TABLE IF EXISTS `reference_data_signatures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: reference_data_signatures
 *
 * Holds a list of all unique signatures and their associated reference data
 * inferences. The reference data used to populate the columns is used as the
 * source of the signature. This signature is used to map jobs to their associated
 * reference data. This allows multiple names (buildernames) to map to the same set of
 * reference data properties. The table provides a data model for modifying the
 * the reference data properties associated with a name (buildername) after it's received.
 * In the case of the build_system_type buildbot, it also allows for a direct mapping
 * between name and associated properties leaving the regular expression analysis as
 * a last resort.
 *
 * NOTE: buildernames are specific to the buildbot build/test system. However this table
 *  can be used by a non-buildbot system for similar sheriff management functions to give
 *  control over incoming job reference data.
 *
 * id - Unique integer id
 * name - Name of signature, buildername in the case of buildbot
 * signature - Hash of all of the associated reference data properties
 * build_os_name - Found in build_platform.os_name
 * build_os_platform - Found in build_platform.platform
 * build_architecture - Found in build_platform.architecture
 * machine_os_name - Found in machine_platform.os_name
 * machine_os_platform - Found in machine_platform.platform
 * machine_architecture - Found in machine_platform.architecture
 * job_group_name - Found in job_group.name
 * job_group_symbol - Found in job_group.symbol
 * job_type_name - Found in job_type.name
 * job_type_symbol - Found in job_type.symbol
 * option_collection_hash - References treeherder_reference_1.option_collection.option_collection_hash
 * build_system_type - The type of build system used to generate the data, defaults to buildbot if not provided
 * first_submission_timestamp - Timestamp associated with the first entry
 * review_timestamp - Timestamp associated with the sheriff review
 * review_status - Review status of buildername, possible values: reviewed | not_reviewed | on_hold
 **************************/
CREATE TABLE `reference_data_signatures` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `signature` varchar(50) COLLATE utf8_bin NOT NULL,
  `build_os_name` varchar(25) COLLATE utf8_bin NOT NULL,
  `build_platform` varchar(25) COLLATE utf8_bin NOT NULL,
  `build_architecture` varchar(25) COLLATE utf8_bin NOT NULL,
  `machine_os_name` varchar(25) COLLATE utf8_bin NOT NULL,
  `machine_platform` varchar(25) COLLATE utf8_bin NOT NULL,
  `machine_architecture` varchar(25) COLLATE utf8_bin NOT NULL,
  `job_group_name` varchar(100) COLLATE utf8_bin DEFAULT NULL,
  `job_group_symbol` char(25) COLLATE utf8_bin DEFAULT '?',
  `job_type_name` varchar(100) COLLATE utf8_bin NOT NULL,
  `job_type_symbol` char(25) COLLATE utf8_bin DEFAULT '?',
  `option_collection_hash` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `build_system_type` varchar(25) COLLATE utf8_bin DEFAULT NULL,
  `repository` varchar(50) COLLATE utf8_bin NOT NULL,
  `first_submission_timestamp` int(10) unsigned NOT NULL,
  `review_timestamp` int(10) unsigned DEFAULT NULL,
  `review_status` enum('reviewed', 'not_reviewed', 'on_hold') COLLATE utf8_bin DEFAULT 'not_reviewed',
  UNIQUE KEY `uni_name_signature_build_type_repository` (`name`, `signature`, `build_system_type`, `repository`),
  KEY `idx_id` (`id`),
  KEY `idx_signature` (`signature`),
  KEY `idx_build_os_name` (`build_os_name`),
  KEY `idx_build_platform` (`build_platform`),
  KEY `idx_build_architecture` (`build_architecture`),
  KEY `idx_machine_os_name` (`machine_os_name`),
  KEY `idx_machine_platform` (`machine_platform`),
  KEY `idx_machine_architecture` (`machine_architecture`),
  KEY `idx_job_group_name` (`job_group_name`),
  KEY `idx_job_group_symbol` (`job_group_symbol`),
  KEY `idx_job_type_name` (`job_type_name`),
  KEY `idx_job_type_symbol` (`job_type_symbol`),
  KEY `idx_option_collection_hash` (`option_collection_hash`),
  KEY `idx_build_system_type` (`build_system_type`),
  KEY `idx_repository` (`repository`),
  KEY `idx_first_submission_timestamp` (`first_submission_timestamp`),
  KEY `idx_review_timestamp` (`review_timestamp`),
  KEY `idx_review_status` (`review_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `bugscache`
--

DROP TABLE IF EXISTS `bugscache`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: bugscache
 *
 * Holds bugzilla bugs associated with intermittent failures.
 *
 * Population Method: scheduled job.
 *
 * Example Data:
 *
 *  status - enum('NEW', 'ASSIGNED', 'REOPENED', 'RESOLVED', 'VERIFIED', 'CLOSED')
 *  resolution - enum('', 'FIXED', 'INVALID', 'WONTFIX', 'LATER', 'REMIND', 'DUPLICATE', 'WORKSFORME')
 *  summary - Summary of bug
 *  crash_signature - Crash signature associated with bug
 *  keywords - Keywords associated with bug
 *  os - Operating system associated with the bug
 *  modified - ?
 **************************/
CREATE TABLE `bugscache` (
  `id` integer NOT NULL,
  `status` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `resolution` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `summary` varchar(255) COLLATE utf8_bin NOT NULL,
  `crash_signature` mediumtext COLLATE utf8_bin,
  `keywords` mediumtext COLLATE utf8_bin,
  `os` varchar(64) COLLATE utf8_bin DEFAULT NULL,
  `modified` datetime COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_status` (`status`),
  KEY `idx_resolution` (`resolution`),
  FULLTEXT KEY `idx_summary` (`summary`),
  FULLTEXT KEY `idx_crash_signature` (`crash_signature`),
  FULLTEXT KEY `idx_keywords` (`keywords`),
  FULLTEXT KEY `idx_all_full_text` (`summary`, `crash_signature`, `keywords`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `build_platform`
--

DROP TABLE IF EXISTS `build_platform`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: build_platform
 *
 * A list of build platforms associated with project test data.
 *
 * Population Method: dynamic from incoming data.
 *
 * Example Data:
 *
 *  os_name -  linux | mac | win | Android | Firefox OS | ...
 *  platform - fedora 12 | redhat 12 | 5.1.2600 | 6.1.7600 | OS X 10.7.2 | ...
 *  architecture - x86 | x86_64 etc...
 **************************/
CREATE TABLE `build_platform` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `os_name` varchar(25) COLLATE utf8_bin NOT NULL,
  `platform` varchar(25) COLLATE utf8_bin NOT NULL,
  `architecture` varchar(25) COLLATE utf8_bin DEFAULT NULL,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_os_name` (`os_name`),
  KEY `idx_platform` (`platform`),
  KEY `idx_architecture` (`architecture`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `failure_classification`
--

DROP TABLE IF EXISTS `failure_classification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: failure_classification
 *
 * A list of failure classification names associated with project test data.
 *
 * Population Method: manual by admin
 *
 * Example Data:
 *
 *  name - broken | clobber-needed | infrastructure | intermittent | needs-filing | other | ...
 **************************/
CREATE TABLE `failure_classification` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `job_group`
--

DROP TABLE IF EXISTS `job_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: job_group
 *
 * A list of job group descriptions associated with individual jobs.
 *
 * Population Method: manual by an admin
 *
 * Example Data:
 *
 *  symbol - B | M | R | T | ...
 *  name - mochitest | build | reftest | ...
 **************************/
CREATE TABLE `job_group` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `symbol` char(25) COLLATE utf8_bin DEFAULT '?',
  `name` varchar(100) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_symbol` (`symbol`),
  KEY `idx_name` (`name`),
  KEY `idx_active_status` (`active_status`),
  UNIQUE KEY `uni_name_symbol` (`name`,`symbol`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `job_type`
--

DROP TABLE IF EXISTS `job_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: job_type
 *
 * A list of job type information and a mapping of job type to
 * an associated job_group.
 *
 * Population Method: dynamic from incoming data
 *
 * Example Data:
 *
 *  symbol - M (1 2 3 4 5 bc oth) | R (C J R) | T (c d o p s tp)
 *           The outer letter represents the symbol for the job_group, the
 *           letters in parenthesis represent the symbols for job_type entries.
 *
 *  name - mochitest-1 | mochitest-2 | tresize | tp5o | ...
 **************************/
CREATE TABLE `job_type` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `symbol` char(25) COLLATE utf8_bin DEFAULT '?',
  `name` varchar(100) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_symbol` (`symbol`),
  KEY `idx_name` (`name`),
  KEY `idx_active_status` (`active_status`),
  UNIQUE KEY `uni_name_symbol` (`name`,`symbol`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `machine`
--

DROP TABLE IF EXISTS `machine`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: machine
 *
 * A list of machine names associated with project test data.
 *
 * Population Method: dynamic from incoming data
 *
 * Example Data:
 *
 *  name - talos-r3-fed64-038 | talos-r3-leopard-034 | tegra-075.n | ...
 *  first_timestamp - timestamp associated with machine's first data entry
 *  last_timestamp - timestamp associated with machine's last data entry
 **************************/
CREATE TABLE `machine` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `first_timestamp` int(10) unsigned NOT NULL,
  `last_timestamp` int(10) unsigned NOT NULL,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`),
  KEY `idx_first_timestamp` (`first_timestamp`),
  KEY `idx_last_timestamp` (`last_timestamp`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `machine_platform`
--

DROP TABLE IF EXISTS `machine_platform`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: machine_platform
 *
 * A list of machine platforms associated with project test data.
 *
 * Population Method: dynamic from incoming data.
 *
 * Example Data:
 *
 *  os_name -  linux | mac | win | Android | Firefox OS | ...
 *  platform - fedora 12 | redhat 12 | 5.1.2600 | 6.1.7600 | OS X 10.7.2 | ...
 *  architecture - x86 | x86_64 etc...
 **************************/
CREATE TABLE `machine_platform` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `os_name` varchar(25) COLLATE utf8_bin NOT NULL,
  `platform` varchar(25) COLLATE utf8_bin NOT NULL,
  `architecture` varchar(25) COLLATE utf8_bin DEFAULT NULL,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_os_name` (`os_name`),
  KEY `idx_platform` (`platform`),
  KEY `idx_architecture` (`architecture`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `option`
--

DROP TABLE IF EXISTS `option`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: option
 *
 * A list of option names associated with test data. May or may not
 * be command line options associated with the build or test.
 *
 * Population Method: dynamic from incoming data, manual by admin
 *
 * Example Data:
 *
 *  name - PGO | Non-PGO | ...
 *
 **************************/
CREATE TABLE `option` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `option_collection`
--

DROP TABLE IF EXISTS `option_collection`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: option_collection
 *
 * Unique collections of options that are applied to test data.
 *
 * Population Method: dynamic from incoming data, manual by admin
 *
 * Example Data:
 *
 *  option_collection_hash - Used to group collections of objects
 *  option_id - References option.id
 **************************/
CREATE TABLE `option_collection` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `option_collection_hash` varchar(40) COLLATE utf8_bin NOT NULL,
  `option_id` integer NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uni_option_collection` (`option_collection_hash`,`option_id`),
  KEY `idx_option` (`option_id`),
  KEY `idx_option_collection_hash` (`option_collection_hash`),
  CONSTRAINT `fk_option` FOREIGN KEY (`option_id`) REFERENCES `option` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `product`
--

DROP TABLE IF EXISTS `product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: product
 *
 * A list of unique product names associated with test data.
 *
 * Population Method: dynamic from incoming data, manual by admin
 *
 * Example Data:
 *
 *  name - Firefox | Fennec | Firefox OS | Thunderbird | Seamonkey | ...
 **************************/
CREATE TABLE `product` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `repository`
--

DROP TABLE IF EXISTS `repository`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: repository
 *
 * A list of repositories reporting pushes and associated test data to treeherder.
 *
 * Population Method: manual by admin
 *
 * Example Data:
 *
 *  repository_group_id - References repository_group.id
 *  name - mozilla-inbound | mozilla-release | gaia-master | gaia-v1-train | ...
 *  dvcs_type - hg | git | ...
 *  url - https://hg.m.o | https://git.m.o | ...
 *  codebase - gecko | gaia | enGB | ...
 *
 **************************/
CREATE TABLE `repository` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `repository_group_id` integer NOT NULL,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `dvcs_type` varchar(25) COLLATE utf8_bin NOT NULL,
  `url` varchar(255) COLLATE utf8_bin NOT NULL,
  `codebase` varchar(50) COLLATE utf8_bin DEFAULT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_repository_group_id` (`repository_group_id`),
  KEY `idx_name` (`name`),
  KEY `idx_type` (`dvcs_type`),
  KEY `idx_codebase` (`codebase`),
  KEY `idx_active_status` (`active_status`),
  CONSTRAINT `fk_repository_group` FOREIGN KEY (`repository_group_id`) REFERENCES `repository_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `repository_group`
--

DROP TABLE IF EXISTS `repository_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: repository_group
 *
 * List of repository group names.
 *
 * Population Method: manual by admin
 *
 * Example Data:
 *
 *  name - train | development | ...
 **************************/
CREATE TABLE `repository_group` (
  `id` integer NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_bin NOT NULL,
  `description` text COLLATE utf8_bin,
  `active_status` enum('active','onhold','deleted') COLLATE utf8_bin DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `idx_name` (`name`),
  KEY `idx_active_status` (`active_status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

DROP TABLE IF EXISTS `job_exclusion`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;

/**************************
 * Table: job_exclusion
 *
 * A list of job exclusions expressed in terms of reference data
 *
 * Population Method: manual via ui
 *
 * Example Data:
 *
 *  name - my_job_exclusion
 *  description - This is a very descriptive text
 *  info - a json field containing the reference data combination
 *  author_id - references auth_user.id
 **************************/
CREATE TABLE `job_exclusion` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `name` varchar(255) NOT NULL UNIQUE,
    `description` longtext NOT NULL,
    `info` longtext NOT NULL,
    `author_id` integer NOT NULL,

KEY `idx_name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;


DROP TABLE IF EXISTS `exclusion_profile`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: exclusion_profile
 *
 * A list of profile for job exclusions.
 * This allows to hide different sets of jobs based on the user
 *
 * Population Method: manual via ui
 *
 * Example Data:
 *
 *  name - My profile name
 *  is_default - 0|1
 *  flat_exclusion - a json field containing a flattened version of the job exclusions
 **************************/
CREATE TABLE `exclusion_profile` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `name` varchar(255) NOT NULL UNIQUE,
    `is_default` bool NOT NULL,
    `flat_exclusion` longtext NOT NULL,
    `author_id` integer NOT NULL,
    `modified` datetime NOT NULL,
KEY `idx_name` (`name`),
KEY `idx_is_default` (`is_default`),
KEY `idx_author` (`author_id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;


DROP TABLE IF EXISTS `user_exclusion_profile`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: user_exclusion_profile
 *
 * A many to many relationship between auth_user and exclusion_profile
 * A user can have more than one profile and profiles are shared among users
 * is_default indicates if this is the default profile for the user
 *
 * Population Method: manual via ui
 *
 * Example Data:
 *
 *  user_id - references auth_user.id
 *  exclusion_profile_id - references exclusion_profile.id
 *  is_default - 0|1
 **************************/
CREATE TABLE `user_exclusion_profile` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `user_id` integer NOT NULL,
    `exclusion_profile_id` integer,
    `is_default` bool NOT NULL,
  UNIQUE (`user_id`, `exclusion_profile_id`),
  KEY `idx_is_default` (`is_default`),
  KEY `idx_user` (`user_id`),
  CONSTRAINT `fk_exclusion_profile` FOREIGN KEY (`exclusion_profile_id`) REFERENCES `exclusion_profile` (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;


DROP TABLE IF EXISTS `exclusion_profile_exclusions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: exclusion_profile_exclusions
 *
 * Many to many relationship between exclusionprofile
 *
 * Population Method: manual via ui
 *
 * Example Data:
 *
 *  exclusionprofile_id - references exclusion_profile.id
 *  jobexclusion_id - references job_exclusion.id
 **************************/
CREATE TABLE `exclusion_profile_exclusions` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `exclusionprofile_id` integer NOT NULL,
    `jobexclusion_id` integer NOT NULL,
    UNIQUE (`exclusionprofile_id`, `jobexclusion_id`),
  CONSTRAINT `fk_exclusionprofile` FOREIGN KEY (`exclusionprofile_id`) REFERENCES `exclusion_profile` (`id`),
  CONSTRAINT `fk_jobexclusion` FOREIGN KEY (`jobexclusion_id`) REFERENCES `job_exclusion` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;


DROP TABLE IF EXISTS `failure_line`;
/*!40101 SET @saved_cs_client = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: failure_line
 *
 * A list of log lines indicating a test failures/crash/error
 *
 * Population Method: dynamic from incoming data
 *
 **************************/

 CREATE TABLE `failure_line` (
     `id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY,
     `job_guid` varchar(50) NOT NULL,
     `repository_id` integer NOT NULL,
     `action` varchar(11) NOT NULL,
     `line` integer UNSIGNED NOT NULL,
     `test` longtext NULL,
     `subtest` longtext NULL,
     `status` varchar(7) NOT NULL,
     `expected` varchar(7) NULL,
     `message` longtext NULL,
     `signature` longtext NULL,
     `level` varchar(8) NULL,
     `stack` longtext NULL,
     `stackwalk_stdout` longtext NULL,
     `stackwalk_stderr` longtext NULL,
     `created` datetime NOT NULL,
     `modified` datetime NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

ALTER TABLE `failure_line` ADD CONSTRAINT `failure_line_job_guid_7d547076_uniq` UNIQUE (`job_guid`, `line`);
CREATE INDEX `failure_line_81ee1a31` ON `failure_line` (`repository_id`);
ALTER TABLE `failure_line` ADD CONSTRAINT `failure_line_repository_id_1d15a55d_fk_repository_id` FOREIGN KEY (`repository_id`) REFERENCES `repository` (`id`);

/*!40101 SET character_set_client = @saved_cs_client */;

DROP TABLE IF EXISTS `classified_failure`;
/*!40101 SET @saved_cs_client = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: classified_failure
 *
 * Failure match represents a group of intermittent failures
 * that can eventually have a bug number assigned
 *
 * Population Method: dynamic from incoming data
 *
 **************************/

CREATE TABLE `classified_failure` (
    `id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `bug_number` integer UNSIGNED NULL,
    `created` datetime NOT NULL,
    `modified` datetime NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;


/*!40101 SET character_set_client = @saved_cs_client */;


DROP TABLE IF EXISTS `matcher`;
/*!40101 SET @saved_cs_client = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: matcher
 *
 * A list of matcher to run on the failures
 *
 * Population Method: dynamic from incoming data
 *
 **************************/

CREATE TABLE `matcher` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `name` varchar(50) NOT NULL UNIQUE
)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;


DROP TABLE IF EXISTS `failure_match`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
/**************************
 * Table: failure_match
 *
 * This table represents the relationship between a failure, a known intermittent failure and a matcher
 *
 * Population Method: dynamic from incoming data
 *
 **************************/

CREATE TABLE `failure_match` (
    `id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `score` numeric(3, 2) NULL,
    `is_best` bool NOT NULL,
    `failure_line_id` bigint NOT NULL,
    `classified_failure_id` bigint NOT NULL,
    `matcher_id` integer NOT NULL
)ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

ALTER TABLE `failure_match` ADD CONSTRAINT `failure_match_failure_line_id_7aeee577_uniq` UNIQUE (`failure_line_id`, `classified_failure_id`, `matcher_id`);
ALTER TABLE `failure_match` ADD CONSTRAINT `failure_match_failure_line_id_66c79baa_fk_failure_id` FOREIGN KEY (`failure_line_id`) REFERENCES `failure_line` (`id`);
CREATE INDEX `failure_match_4b7d144b` ON `failure_match` (`failure_line_id`);
CREATE INDEX `failure_match_3172ccd0` ON `failure_match` (`classified_failure_id`);
ALTER TABLE `failure_match` ADD CONSTRAINT `da2a7f93f2c7705b917a81c5aed77017` FOREIGN KEY (`classified_failure_id`) REFERENCES `classified_failure` (`id`);
CREATE INDEX `failure_match_c724f956` ON `failure_match` (`matcher_id`);
ALTER TABLE `failure_match` ADD CONSTRAINT `failure_match_matcher_id_2c1e8bf2_fk_matcher_id` FOREIGN KEY (`matcher_id`) REFERENCES `matcher` (`id`);

/*!40101 SET character_set_client = @saved_cs_client */;


/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
